// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1891.FirstSteamworks;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.AnalogAccelerometer;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.smartdashboard.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogGyro driveSystemAnalogGyro1;
    public static AnalogAccelerometer driveSystemAnalogAccelerometer1;
    public static CANTalon frontLeftMotor;
    public static Encoder driveSystemQuadratureEncoder1;
    public static PIDController driveSystemPIDController1;
    public static CANTalon rearLeftMotor;
    public static Encoder driveSystemQuadratureEncoder2;
    public static PIDController driveSystemPIDController2;
    public static CANTalon frontRightMotor;
    public static Encoder driveSystemQuadratureEncoder3;
    public static PIDController driveSystemPIDController3;
    public static CANTalon rearRightMotor;
    public static Encoder driveSystemQuadratureEncoder4;
    public static PIDController driveSystemPIDController4;
    public static CANTalon climberCANTalon1;
    public static DoubleSolenoid gearCarrierDoubleSolenoid1;
    public static RobotDrive chassis;

    /**
     * 
     */
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystemAnalogGyro1 = new AnalogGyro(0);
        LiveWindow.addSensor("DriveSystem", "AnalogGyro 1", driveSystemAnalogGyro1);
        driveSystemAnalogGyro1.setSensitivity(0.007);
        driveSystemAnalogAccelerometer1 = new AnalogAccelerometer(1);
        LiveWindow.addSensor("DriveSystem", "AnalogAccelerometer 1", driveSystemAnalogAccelerometer1);
        driveSystemAnalogAccelerometer1.setSensitivity(0.0);
        driveSystemAnalogAccelerometer1.setZero(2.5);
        frontLeftMotor = new CANTalon(0);
        LiveWindow.addActuator("DriveSystem", "CAN Talon 1", frontLeftMotor);
        
        driveSystemQuadratureEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveSystem", "Quadrature Encoder 1", driveSystemQuadratureEncoder1);
        driveSystemQuadratureEncoder1.setDistancePerPulse(1.0);
        driveSystemQuadratureEncoder1.setPIDSourceType(PIDSourceType.kRate);
        driveSystemPIDController1 = new PIDController(1.0, 0.0, 0.0, 0.0, driveSystemQuadratureEncoder1, frontLeftMotor, 0.02);
        LiveWindow.addActuator("DriveSystem", "PID Controller 1", driveSystemPIDController1);
        driveSystemPIDController1.setContinuous(false);
        driveSystemPIDController1.setAbsoluteTolerance(0.2);

        driveSystemPIDController1.setOutputRange(-1.0, 1.0);
        rearLeftMotor = new CANTalon(1);
        LiveWindow.addActuator("DriveSystem", "CAN Talon 2", rearLeftMotor);
        
        driveSystemQuadratureEncoder2 = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveSystem", "Quadrature Encoder 2", driveSystemQuadratureEncoder2);
        driveSystemQuadratureEncoder2.setDistancePerPulse(1.0);
        driveSystemQuadratureEncoder2.setPIDSourceType(PIDSourceType.kRate);
        driveSystemPIDController2 = new PIDController(1.0, 0.0, 0.0, 0.0, driveSystemQuadratureEncoder2, rearLeftMotor, 0.02);
        LiveWindow.addActuator("DriveSystem", "PID Controller 2", driveSystemPIDController2);
        driveSystemPIDController2.setContinuous(false);
        driveSystemPIDController2.setAbsoluteTolerance(0.2);

        driveSystemPIDController2.setOutputRange(-1.0, 1.0);
        frontRightMotor = new CANTalon(2);
        LiveWindow.addActuator("DriveSystem", "CAN Talon 3", frontRightMotor);
        
        driveSystemQuadratureEncoder3 = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveSystem", "Quadrature Encoder 3", driveSystemQuadratureEncoder3);
        driveSystemQuadratureEncoder3.setDistancePerPulse(1.0);
        driveSystemQuadratureEncoder3.setPIDSourceType(PIDSourceType.kRate);
        driveSystemPIDController3 = new PIDController(1.0, 0.0, 0.0, 0.0, driveSystemQuadratureEncoder3, frontRightMotor, 0.02);
        LiveWindow.addActuator("DriveSystem", "PID Controller 3", driveSystemPIDController3);
        driveSystemPIDController3.setContinuous(false);
        driveSystemPIDController3.setAbsoluteTolerance(0.2);

        driveSystemPIDController3.setOutputRange(-1.0, 1.0);
        rearRightMotor = new CANTalon(3);
        LiveWindow.addActuator("DriveSystem", "CAN Talon 4", rearRightMotor);
        
        driveSystemQuadratureEncoder4 = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveSystem", "Quadrature Encoder 4", driveSystemQuadratureEncoder4);
        driveSystemQuadratureEncoder4.setDistancePerPulse(1.0);
        driveSystemQuadratureEncoder4.setPIDSourceType(PIDSourceType.kRate);
        driveSystemPIDController4 = new PIDController(1.0, 0.0, 0.0, 0.0, driveSystemQuadratureEncoder4, rearRightMotor, 0.02);
        LiveWindow.addActuator("DriveSystem", "PID Controller 4", driveSystemPIDController4);
        driveSystemPIDController4.setContinuous(false);
        driveSystemPIDController4.setAbsoluteTolerance(0.2);
        
        chassis = new RobotDrive(frontLeftMotor, rearLeftMotor, frontRightMotor, rearRightMotor);

        driveSystemPIDController4.setOutputRange(-1.0, 1.0);
        climberCANTalon1 = new CANTalon(4);
        LiveWindow.addActuator("Climber", "CAN Talon 1", climberCANTalon1);
        
        gearCarrierDoubleSolenoid1 = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("GearCarrier", "Double Solenoid 1", gearCarrierDoubleSolenoid1);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1891.FirstSteamworks.subsystems;

import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc1891.FirstSteamworks.RobotMap;
import org.usfirst.frc1891.FirstSteamworks.commands.*;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.MjpegServer;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Camera extends Subsystem {

	
	private double[] noTarget = {0};
	private PIDSourceType type;
	private int targetSize = RobotMap.targetSize;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public Camera()
    {
    	UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
//    	new Thread(() -> {
//            UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
//            camera.setResolution(640, 480);
//            
//            CvSink cvSink = CameraServer.getInstance().getVideo();
//            CvSource outputStream = CameraServer.getInstance().putVideo("Blur", 640, 480);
//            
//            Mat source = new Mat();
//            Mat output = new Mat();
//            
//            while(true) {
//                cvSink.grabFrame(source);
//                Imgproc.cvtColor(source, output, Imgproc.COLOR_BGR2GRAY);
//                outputStream.putFrame(output);
//            }
//        }).start();
    }
    
    /**
     * @return
     * @throws NoTargetFoundException
     */
    private double getPegTargetAreaError() throws NoTargetFoundException
    {
    	NetworkTable target = NetworkTable.getTable("GRIP/myContoursReport");
    	@SuppressWarnings("deprecation")
		double[] targets = target.getNumberArray("area");
    	if(targets.length == 2)
    	{
    		double error = targets[0] - targets[1];
    		return error;
    	}
    	else
    	{
    		throw new NoTargetFoundException();
    	}
    }
    
    /**
     * @return
     * @throws NoTargetFoundException
     */
    private double getPegTargetPositionError()
    {
    	NetworkTable target = NetworkTable.getTable("GRIP/myContoursReport");
    	@SuppressWarnings("deprecation")
		double[] targets = target.getNumberArray("centerX");
//    	SmartDashboard.putNumber("targets", targets.length);
//    	if(targets.length == 2)
//    	{
    		double error = ((targets[0] + targets[1])/2)-320;
    		return error;
//    	}
//    	else
//    	{
//    		throw new NoTargetFoundException();
//    	}
    }
    
    private double getPegTargetDistanceAreaError()
    {
    	NetworkTable target = NetworkTable.getTable("GRIP/myContoursReport");
    	@SuppressWarnings("deprecation")
		double[] targets = target.getNumberArray("area");
    	double error = ((targets[0] + targets[1])/2) - 200;
    	return error;
    }

	public double getErrorX()
	{
		return getPegTargetPositionError();
	}
	
	public double getErrorY()
	{
		return getPegTargetDistanceAreaError();
	}
}


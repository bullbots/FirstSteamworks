// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1891.FirstSteamworks.subsystems;

import org.usfirst.frc1891.FirstSteamworks.RobotMap;
import org.usfirst.frc1891.FirstSteamworks.commands.*;

import com.ctre.CANTalon;

import com.kauailabs.navx.frc.*;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;


/**
 *
 */
public class DriveSystem extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AHRS nav = RobotMap.nav;
    private final AnalogInput frontSonic = RobotMap.frontSonic;
//    private final AnalogAccelerometer analogAccelerometer1 = RobotMap.driveSystemAnalogAccelerometer1;
    private final CANTalon frontLeftMotor = RobotMap.frontLeftMotor;
//    private final Encoder quadratureEncoder1 = RobotMap.driveSystemQuadratureEncoder1;
    private final CANTalon rearLeftMotor = RobotMap.rearLeftMotor;
//    private final Encoder quadratureEncoder2 = RobotMap.driveSystemQuadratureEncoder2;
    private final CANTalon frontRightMotor = RobotMap.frontRightMotor;
//    private final Encoder quadratureEncoder3 = RobotMap.driveSystemQuadratureEncoder3;
    private final CANTalon rearRightMotor = RobotMap.rearRightMotor;
//    private final Encoder quadratureEncoder4 = RobotMap.driveSystemQuadratureEncoder4;
    
    private final RobotDrive chassis = RobotMap.chassis; 
    
    private double zeroAngle;
    private double gyroTarget;
    private double gyroCorrection;
    
    private boolean useGyro = true;
    
    private int turnTimeout;
    private boolean doneTurning = true;
    
    private int printCounter;
	private double allowableErrorPosition = 2500;
    
    /**
     * @param p
     * @param i
     * @param d
     */
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    public DriveSystem(double p, double i, double d) {
		super(p, i, d);
		this.setAbsoluteTolerance(2);
		this.getPIDController().setInputRange(0, 360);
		this.getPIDController().setOutputRange(-0.2, 0.2);
		this.getPIDController().setContinuous();
		setSetpoint(0);
		enable();
	}
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    	setDefaultCommand(new JoyStickDrive());
//    	setDefaultCommand(new DriveOneWheel());
    	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void clear()
    {
    	gyroTarget = nav.getAngle();
    	gyroCorrection = 0;
    }
    
    /**
     * @param angle 
     * 
     */
    public void drive(double angle) {
    	setVelocityMode();
    	gyroTarget = normalizeAngle(gyroTarget + angle);
    	this.setSetpoint(gyroTarget);
    	

    	SmartDashboard.putNumber("gyro target", gyroTarget);
    	SmartDashboard.putNumber("gyro correction", gyroCorrection);
//    	SmartDashboard.putNumber("yaw rate", nav.getRate());
//    	SmartDashboard.putBoolean("is calibrating", nav.isCalibrating());
//    	SmartDashboard.putBoolean("is rotating", nav.isRotating());
    	SmartDashboard.putNumber("gyro", getGyro());
    	
    	double instantGyroCorrection;
    	if (onTarget()) {
    		instantGyroCorrection = 0;
    	}
    	else {
    		instantGyroCorrection = gyroCorrection;
    	}
//    	System.out.println("gyro correct: " + instantGyroCorrection);
    	chassis.mecanumDrive_Cartesian(0, 0, instantGyroCorrection, 0);
//    	chassis.mecanumDrive_Cartesian(x, y, z, gyro);
    }
    
    public boolean isTurnFinished() {
    	return onTarget();
    }
    
    /**
     * @param x
     * @param y
     * @param angle
     */
    public void drive(double x, double y, double z, boolean allowGyro) {
    	setVelocityMode();
    	this.setSetpoint(gyroTarget);
    	
    	if (z != 0) {
    		gyroTarget = getGyro();
    	}
    	else if (onTarget()) {
    		z = 0;
    	}
    	else {
    		z = gyroCorrection;
    	}
    	
    	SmartDashboard.putNumber("gyro target", gyroTarget);
    	SmartDashboard.putNumber("gyro correction", gyroCorrection);
//    	SmartDashboard.putNumber("yaw rate", nav.getRate());
//    	SmartDashboard.putBoolean("is calibrating", nav.isCalibrating());
//    	SmartDashboard.putBoolean("is rotating", nav.isRotating());
    	
    	useGyro = SmartDashboard.getBoolean("Use Gyro?", true);
    	double gyro = 0;
    	if (useGyro == true && allowGyro)
    	{
    		gyro = getGyro();
    		SmartDashboard.putNumber("gyro", getGyro());
    	}
    	chassis.mecanumDrive_Cartesian(x, y, z, gyro);
//    	chassis.mecanumDrive_Cartesian(x, y, z, gyro);
    }
    
    
    

    
    public void zeroAngleError() {
    	gyroTarget = getGyro();
    }
    
    /**
     * Drives the robot in omnidirectional mode with no turning. Allows autonomous diagonal movement.
     * @param x value for side to side movement. Takes -1 to 1 value. Positive is left, Negative is right.
     * @param y value for forward backward movement. Takes -1 to 1 value. Positive is forward, Negative is backward.
     */
    public void vectorDrive(double x, double y)
    {
    	drive(x,y,0,false);
    }
    
    /**
     * Drives using joystick input. Uses percent control mode.
     * @param driverJoy joystick to be read.
     * 
     */
    public void joyDrivePercent(Joystick driverJoy)
    {
    	useGyro = SmartDashboard.getBoolean("Use Gyro?", true);
    	double gyro = 0;
    	if (useGyro == true)
    	{
    		gyro = getGyro();
    		SmartDashboard.putNumber("gyro", getGyro());
    	}
    	// normal drive method
//    	chassis.mecanumDrive_Cartesian(deadBand(driverJoy.getX(),0.1), deadBand(driverJoy.getY(),0.1), indexInput(deadBand(driverJoy.getZ(),0.6),0.6), gyro);
    	// gamecube drive method
    	chassis.mecanumDrive_Cartesian(deadBand(driverJoy.getX(),0.1), deadBand(driverJoy.getY(),0.1), indexInput(deadBand(driverJoy.getRawAxis(5),0.6),0.6), gyro);
//    	SmartDashboard.putNumber("Joystick X", driverJoy.getX());
//    	SmartDashboard.putNumber("Joystick Y", driverJoy.getY());
//    	SmartDashboard.putNumber("Joystick Z", driverJoy.getZ());
    }
    
    /**
     * Drives using joystick input. Uses velocity control loop.
     * @param driverJoy joystick to be read.
     * 
     */
    public void joyDriveVelocity(Joystick driverJoy, int controllerProfile)
    {
    	setVelocityMode();
    	switch (controllerProfile) {
    		case 0:
    			drive(deadBand(driverJoy.getX(),0.1),deadBand(driverJoy.getY(),0.1),(indexInput(deadBand(driverJoy.getZ(),0.6),0.6)),true);
    			break;
    		case 1:
    			drive(deadBand(driverJoy.getX(),0.1),deadBand(driverJoy.getY(),0.1),(indexInput(deadBand(driverJoy.getRawAxis(5)*2,0.6),0.6)),true);
    			break;
    	}
    }
    
    // Creates an area on joystick where no value is registered. Prevents controller touchiness.
    private double deadBand(double axisVal, double deadBand)
	{
		if(axisVal < -deadBand)
			return axisVal;
		if(axisVal > +deadBand)
			return axisVal;
		return 0;
	}
    
    // lowers value of input to decrease fast acceleration when deadband is exited.
    private double indexInput(double axisVal, double index)
    {
    	if (axisVal > 0)
    	{
    		axisVal = axisVal - index;
    	}
    	else if (axisVal < 0)
    	{
    		axisVal = axisVal + index;
    	}
    	return axisVal;
    }
    
    /**
     * Drives forward or backward at a specified Percentage.
     * @param speed
     */
    public void driveForwardPercentage(double speed)
    {
    	setPercentageMode();
    	setFrontLeftWheel(speed);
    	setRearLeftWheel(speed);
    	setFrontRightWheel(speed);
    	setRearRightWheel(speed);
    }
    
    /**
     * Drives omnidirectionally only side to side.
     * @param power positive is right, negative is left
     */
    public void driveSidewaysPercentage(double power)
    {
    	setPercentageMode();
    	setFrontLeftWheel(power);
    	setFrontRightWheel(-power);
    	setRearLeftWheel(-power);
    	setRearRightWheel(power);
    }

    /**
     * Turns at a specified Percentage.
     * @param speed positive is right, negative is left.
     */
    public void turnPercentage(double speed)
    {
    	setPercentageMode();
    	setFrontLeftWheel(speed);
    	setRearLeftWheel(speed);
    	setFrontRightWheel(-speed);
    	setRearRightWheel(-speed);
    }
    
    /**
     * Drives forward or backward at a specified velocity.
     * @param speed
     */
    public void driveForwardVelocity(double speed)
    {
    	setVelocityMode();
    	setFrontLeftWheel(speed);
    	setRearLeftWheel(speed);
    	setFrontRightWheel(speed);
    	setRearRightWheel(speed);
    }
    
    /**
     * Drives omnidirectionally only side to side.
     * @param power positive is right, negative is left
     */
    public void driveSidewaysVelocity(double power)
    {
    	setVelocityMode();
    	setFrontLeftWheel(power);
    	setFrontRightWheel(-power);
    	setRearLeftWheel(-power);
    	setRearRightWheel(power);
    }

    /**
     * Turns at a specified velocity.
     * @param speed positive is right, negative is left.
     */
    public void turnVelocity(double speed)
    {
    	setVelocityMode();
    	setFrontLeftWheel(speed);
    	setRearLeftWheel(speed);
    	setFrontRightWheel(-speed);
    	setRearRightWheel(-speed);
    }
    
    /**
     * Drives forward and backward. Uses CANTalon position control loop
     * @param setPoint
     */
    public void driveForwardPosition(double setPoint)
    {
    	setPositionMode();
    	frontLeftMotor.set(setPoint);
    	rearLeftMotor.set(setPoint);
    	frontRightMotor.set(-setPoint);
    	rearRightMotor.set(-setPoint);
    }
    
    /**
     * Drives omnidirectionally only side to side. Uses CANTalon position control loop.
     * @param setPoint target travel distance
     */
    public void driveSidewaysPosition(double setPoint)
    {
    	setPositionMode();
    	frontLeftMotor.set(setPoint);
    	rearLeftMotor.set(-setPoint);
    	frontRightMotor.set(-setPoint);
    	rearRightMotor.set(setPoint);
    }
    
    /**
     * Sets all motors to 0 output.
     */
    public void stopMotors()
    {
    	frontLeftMotor.set(0);
    	rearLeftMotor.set(0);
    	frontRightMotor.set(0);
    	rearRightMotor.set(0);
    }
    
    
    public void zeroPosition() {
    	frontLeftMotor.setPosition(0);
    	rearLeftMotor.setPosition(0);
    	frontRightMotor.setPosition(0);
    	rearRightMotor.setPosition(0);
    }
    
    
    
    
    /**
     * Sets motor output value for front left motor. Different control modes apply the value differently
     * 
     * 	percentage mode - sets percent of power to be applied.
     * 	voltage mode - sets voltage to be applied.
     * 	velocity mode - sets target velocity for PID closed loop.
     * 	position mode - sets target position for PID closed loop.
     * 
     * @param value 
     */
    public void setFrontLeftWheel(double value)
    {
    	frontLeftMotor.set(value);
    }
    
    /**
     * Sets motor output value for rear left motor. Different control modes apply the value differently
     * 
     * 	percentage mode - sets percent of power to be applied.
     * 	voltage mode - sets voltage to be applied.
     * 	velocity mode - sets target velocity for PID closed loop.
     * 	position mode - sets target position for PID closed loop.
     * 
     * @param value 
     */
    public void setRearLeftWheel(double value)
    {
    	rearLeftMotor.set(value);
    }
    
    /**
     * Sets motor output value for front right motor. Different control modes apply the value differently
     * 
     * 	percentage mode - sets percent of power to be applied.
     * 	voltage mode - sets voltage to be applied.
     * 	velocity mode - sets target velocity for PID closed loop.
     * 	position mode - sets target position for PID closed loop.
     * 
     * @param value 
     */
    public void setFrontRightWheel(double value)
    {
    	frontRightMotor.set(value);
    }
    
    /**
     * Sets motor output value for rear right motor. Different control modes apply the value differently
     * 
     * 	percentage mode - sets percent of power to be applied.
     * 	voltage mode - sets voltage to be applied.
     * 	velocity mode - sets target velocity for PID closed loop.
     * 	position mode - sets target position for PID closed loop.
     * 
     * @param value 
     */
    public void setRearRightWheel(double value)
    {
    	rearRightMotor.set(value);
    }
    
    
    
    
    
    /**
     * Gets error for front left motor closed control loop
     * @return closed loop error
     */
    public double getFrontLeftWheelError()
    {
		return frontLeftMotor.getClosedLoopError();
    }
    
    /**
     * Gets error for rear left motor closed control loop
     * @return closed loop error
     */
    public double getRearLeftWheelError()
    {
		return rearLeftMotor.getClosedLoopError();
    }
    
    /**
     * Gets error for front right motor closed control loop
     * @return closed loop error
     */
    public double getFrontRightWheelError()
    {
		return frontRightMotor.getClosedLoopError();
    }
    
    /**
     * Gets error for rear right motor closed control loop
     * @return closed loop error
     */
    public double getRearRightWheelError()
    {
		return rearRightMotor.getClosedLoopError();
    }
    
    
    
    /**
     * Gets speed of front left wheel in rotations per minute.
     * @return wheel speed in rotations per minute.
     */
    public double getFrontLeftWheelSpeed()
    {
    	return frontLeftMotor.getSpeed();
    }
    
    /**
     * Gets speed of rear left wheel in rotations per minute.
     * @return wheel speed in rotations per minute.
     */
    public double getRearLeftWheelSpeed()
    {
    	return rearLeftMotor.getSpeed();
    }
    
    /**
     * Gets speed of front right wheel in rotations per minute.
     * @return wheel speed in rotations per minute.
     */
    public double getFrontRightWheelSpeed()
    {
    	return frontRightMotor.getSpeed();
    }
    
    /**
     * Gets speed of rear right wheel in rotations per minute.
     * @return wheel speed in rotations per minute.
     */
    public double getRearRightWheelSpeed()
    {
    	return rearRightMotor.getSpeed();
    }
    
    
    
    
    /**
     * Gets Position of front left wheel in TODO.
     * @return wheel Position in TODO.
     */
    public double getFrontLeftWheelPosition()
    {
    	return frontLeftMotor.getPosition();
    }
    
    /**
     * Gets Position of rear left wheel in TODO.
     * @return wheel Position in TODO.
     */
    public double getRearLeftWheelPosition()
    {
    	return rearLeftMotor.getPosition();
    }
    
    /**
     * Gets Position of front right wheel in TODO.
     * @return wheel Position in TODO.
     */
    public double getFrontRightWheelPosition()
    {
    	return frontRightMotor.getPosition();
    }
    
    /**
     * Gets Position of rear right wheel in TODO.
     * @return wheel Position in TODO.
     */
    public double getRearRightWheelPosition()
    {
    	return rearRightMotor.getPosition();
    }
    
    
    
    
    /**
     * Zeroes navx gyro.
     */
    public void zeroGyro()
    {
    	zeroAngle = nav.getAngle();
    }
    
    /**
     * Gets navx gyro value. May be zeroed.
     * @return angle of robot in degrees.
     */
    public double getGyro()
    {
    	double angle = nav.getAngle() - zeroAngle; //gets gyro value and zeroes it with saved value
    	angle = normalizeAngle(angle);
    	return angle;
    }
    
    private double normalizeAngle(double angle)
    {
    	double processedAngle = angle % 360; // Turns values greater than 360 into values within normal range
    	if (processedAngle < 0) // Turn negative angles into positive ones
		{
			processedAngle = 360 + processedAngle;
		}
//    	double angle = nav.getAngle();
    	return processedAngle;
    }
    
    
    
    /**
     * Sets all drive motors to position control mode.
     */
    public void setPositionMode()
    {
    	frontLeftMotor.changeControlMode(CANTalon.TalonControlMode.Position);
    	frontLeftMotor.setProfile(1);
    	frontLeftMotor.configPeakOutputVoltage(+6f, -6f);
    	rearLeftMotor.changeControlMode(CANTalon.TalonControlMode.Position);
    	rearLeftMotor.setProfile(1);
    	rearLeftMotor.configPeakOutputVoltage(+6f, -6f);
    	frontRightMotor.changeControlMode(CANTalon.TalonControlMode.Position);
    	frontRightMotor.setProfile(1);
    	frontRightMotor.configPeakOutputVoltage(+6f, -6f);
    	rearRightMotor.changeControlMode(CANTalon.TalonControlMode.Position);
    	rearRightMotor.setProfile(1);
    	rearRightMotor.configPeakOutputVoltage(+6f, -6f);
    }
    
    /**
     * Sets all drive motors to percentage control mode.
     */
    public void setPercentageMode()
    {
    	frontLeftMotor.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
    	rearLeftMotor.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
    	frontRightMotor.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
    	rearRightMotor.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
    }
    
    /**
     * Sets all drive motors to velocity control mode.
     */
    public void setVelocityMode()
    {
    	frontLeftMotor.changeControlMode(CANTalon.TalonControlMode.Speed);
    	frontLeftMotor.setProfile(0);
    	frontLeftMotor.configPeakOutputVoltage(+12f, -12f);
    	rearLeftMotor.changeControlMode(CANTalon.TalonControlMode.Speed);
    	rearLeftMotor.setProfile(0);
    	rearLeftMotor.configPeakOutputVoltage(+12f, -12f);
    	frontRightMotor.changeControlMode(CANTalon.TalonControlMode.Speed);
    	frontRightMotor.setProfile(0);
    	frontRightMotor.configPeakOutputVoltage(+12f, -12f);
    	rearRightMotor.changeControlMode(CANTalon.TalonControlMode.Speed);
    	rearRightMotor.setProfile(0);
    	rearRightMotor.configPeakOutputVoltage(+12f, -12f);
    }
    
    /**
     * Sets all drive motors to voltage control mode.
     */
    public void setVoltageMode()
    {
    	frontLeftMotor.changeControlMode(CANTalon.TalonControlMode.Voltage);
    	rearLeftMotor.changeControlMode(CANTalon.TalonControlMode.Voltage);
    	frontRightMotor.changeControlMode(CANTalon.TalonControlMode.Voltage);
    	rearRightMotor.changeControlMode(CANTalon.TalonControlMode.Voltage);
    }
    
    
    public boolean onTargetPosition() {
    	System.out.println("front left error: "+frontLeftMotor.getClosedLoopError());
    	boolean frontLeft = (frontLeftMotor.getClosedLoopError() < allowableErrorPosition) && (frontLeftMotor.getClosedLoopError() > -allowableErrorPosition);
    	boolean rearLeft = (rearLeftMotor.getClosedLoopError() < allowableErrorPosition) && (rearLeftMotor.getClosedLoopError() > -allowableErrorPosition);
    	boolean frontRight = (frontRightMotor.getClosedLoopError() < allowableErrorPosition) && (frontRightMotor.getClosedLoopError() > -allowableErrorPosition);
    	boolean rearRight = (rearRightMotor.getClosedLoopError() < allowableErrorPosition) && (rearRightMotor.getClosedLoopError() > -allowableErrorPosition);
//    	System.out.println(frontLeft && rearLeft && frontRight && rearRight);
		return frontLeft && rearLeft && frontRight && rearRight;
    }
    
    
	
	/**
	 * Debug command to check motor outputs, puts values on smartdashboard.
	 */
	public void publishSpeeds()
	{
//		if(printCounter == 2)
//		{
//			SmartDashboard.putNumber("FrontLeftSpeed", getFrontLeftWheelSpeed());
			System.out.println("Front Left wheel: " + getFrontLeftWheelSpeed());
//	    	SmartDashboard.putNumber("RearLeftSpeed", getRearLeftWheelSpeed());
	    	System.out.println("Rear Left wheel: " + getRearLeftWheelSpeed());
//	    	SmartDashboard.putNumber("FrontRightSpeed", getFrontRightWheelSpeed());
	    	System.out.println("Front Right wheel: " + getFrontRightWheelSpeed());
//	    	SmartDashboard.putNumber("RearRightSpeed", getRearRightWheelSpeed());
	    	System.out.println("Rear right wheel: " + getRearRightWheelSpeed());
//	    	printCounter = 0;
//		}
//		else
//		{
//			printCounter++;
//		}
		
    }
	
	/**
	 * 
	 */
	public void publishDistances() {
		System.out.println("Front Left wheel: " + getFrontLeftWheelPosition());
		System.out.println("front left wheel output: " + frontLeftMotor.getOutputVoltage());
//    	System.out.println("Rear Left wheel: " + getRearLeftWheelPosition());
//    	System.out.println("Front Right wheel: " + getFrontRightWheelPosition());
//    	System.out.println("Rear right wheel: " + getRearRightWheelPosition());
	}

	@Override
	protected double returnPIDInput() {
		return getGyro();
	}

	@Override
	protected void usePIDOutput(double output) {
		gyroCorrection = output;
	}
	
	/**
	 * @return
	 */
	public double getFrontRangefinderDistance() {
		return frontSonic.getAverageValue(); //* TODO rangefinder multiplier;
	}
}


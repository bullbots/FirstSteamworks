// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1891.FirstSteamworks.commands;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1891.FirstSteamworks.Robot;

/**
 *
 */
public class Align extends Command{

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	double center;
	boolean targetSpotted;
	boolean isFinished = false;
	double error;
	static final double m_acceptableError = 50;
	
	//PID values for side to side alignment
	private static final double m_XkP = 0.0017;
	private static final double m_XkI = 0.00001;
	private static final double m_XkD = 0;
	
	//PID values for forward backward alignment
	private static final double m_YkP = 0.001;
	private static final double m_YkI = 0;
	private static final double m_YkD = 0;
	
	private double m_xOutput;
	private double m_yOutput;
	
	private final PIDOutput m_outputX = this::usePIDOutputX;
	private final PIDOutput m_outputY = this::usePIDOutputY;
	
	private final PIDSource m_sourceX = new PIDSource() {
	    public void setPIDSourceType(PIDSourceType pidSource) {
	    }

	    public PIDSourceType getPIDSourceType() {
	      return PIDSourceType.kDisplacement;
	    }

	    public double pidGet() {
	      return returnPIDInputX();
	    }
	};
	  
	private final PIDSource m_sourceY = new PIDSource() {
		public void setPIDSourceType(PIDSourceType pidSource) {
		}

		public PIDSourceType getPIDSourceType() {
			return PIDSourceType.kDisplacement;
		}

		public double pidGet() {
			return returnPIDInputY();
		}
	};
	
	PIDController m_controllerX;
	PIDController m_controllerY;
	
    /**
     * 
     */
    public Align() {
    	m_controllerX = new PIDController(m_XkP, m_XkI, m_XkD, m_sourceX, m_outputY);
    	m_controllerY = new PIDController(m_YkP, m_YkI, m_YkD, m_sourceY, m_outputY);
    	requires(Robot.driveSystem);
    	requires(Robot.camera);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.driveSystem.setVelocityMode();
    	m_controllerX.setInputRange(-320, 320);
    	m_controllerX.setOutputRange(-0.1, 0.1);
    	m_controllerY.setInputRange(-320, 320);
    	m_controllerY.setOutputRange(-0.1, 0.1);
    	m_controllerX.setAbsoluteTolerance(m_acceptableError);
    	m_controllerY.setAbsoluteTolerance(m_acceptableError);
    	m_controllerX.setToleranceBuffer(5);
    	m_controllerY.setToleranceBuffer(5);
    	m_controllerX.setSetpoint(0);
    	m_controllerY.setSetpoint(0);
//    	m_controllerX.enable();
    	m_controllerY.enable();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
//    	try {
//			error = Robot.camera.getPegTargetPositionError();
//		} catch (NoTargetFoundException e) {
//			e.printStackTrace();
//		}
//    	
//    	SmartDashboard.putNumber("error", error);
//    	
//    	if(error > m_acceptableError || error < -m_acceptableError)
//    	{
//    		SmartDashboard.putNumber("power", error * m_P);
//    		Robot.driveSystem.driveSideways(error * m_P);
//    	}
//    	else if(error < m_acceptableError && error > -m_acceptableError && error != 0)
//    	{
//    		
//    		isFinished = true;
//    		error = 0;
//    	}
    	SmartDashboard.putNumber("error", m_controllerX.getError());
    	SmartDashboard.putNumber("power", m_controllerX.get());
    	SmartDashboard.putNumber("error", m_controllerY.getError());
    	SmartDashboard.putNumber("power", m_controllerY.get());
    	
    	Robot.driveSystem.vectorDrive(m_xOutput, m_yOutput);
    	//image is 640px wide and 480px tall
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return m_controllerX.onTarget() && m_controllerY.onTarget();
    }

    // Called once after isFinished returns true
    protected void end() {
    	m_controllerX.disable();
    	m_controllerY.enable();
    	Robot.driveSystem.stopMotors();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
	
	protected double returnPIDInputX() {
		return Robot.camera.getErrorX();
	}

	protected double returnPIDInputY() {
		return Robot.camera.getErrorY();
	}
	
	protected void usePIDOutputX(double output) {
		m_xOutput = output;
	}
	
	protected void usePIDOutputY(double output) {
		m_yOutput = output;
	}
}

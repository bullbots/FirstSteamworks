// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1891.FirstSteamworks.commands;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.command.PIDCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc1891.FirstSteamworks.subsystems.DriveSystem;

import org.usfirst.frc1891.FirstSteamworks.Robot;

/**
 *
 */
public class Align extends PIDCommand{

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	double center;
	boolean targetSpotted;
	boolean isFinished = false;
	double error;
	static final double m_acceptableError = 50;
	private static final double m_kP = 0.0017;
	private static final double m_kI = 0.00001;
	private static final double m_kD = 0;

	PIDController pid;
	
    /**
     * 
     */
    public Align() {
    	super(m_kP, m_kI, m_kD);
    	requires(Robot.driveSystem);
    	requires(Robot.camera);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	pid = super.getPIDController();
    	isFinished = false;
    	Robot.driveSystem.setPIDMode(DriveSystem.PIDDirection.Sideways);
    	pid.setInputRange(-320, 320);
    	pid.setOutputRange(-0.4, 0.4);
    	pid.setAbsoluteTolerance(m_acceptableError);
    	pid.setToleranceBuffer(5);
    	pid.setSetpoint(0);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
//    	try {
//			error = Robot.camera.getPegTargetPositionError();
//		} catch (NoTargetFoundException e) {
//			e.printStackTrace();
//		}
//    	
//    	SmartDashboard.putNumber("error", error);
//    	
//    	if(error > m_acceptableError || error < -m_acceptableError)
//    	{
//    		SmartDashboard.putNumber("power", error * m_P);
//    		Robot.driveSystem.driveSideways(error * m_P);
//    	}
//    	else if(error < m_acceptableError && error > -m_acceptableError && error != 0)
//    	{
//    		
//    		isFinished = true;
//    		error = 0;
//    	}
    	SmartDashboard.putNumber("error", pid.getError());
    	SmartDashboard.putNumber("power", pid.get());
    	//image is 640px wide and 480px tall
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return pid.onTarget();
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveSystem.setAllMotors(0);
    }
//
//    // Called when another command which requires one or more of the same
//    // subsystems is scheduled to run
//    protected void interrupted() {
//    	System.out.println("interrupted");
//    }

	@Override
	protected double returnPIDInput() {
		return Robot.camera.pidGet();
	}

	@Override
	protected void usePIDOutput(double output) {
		Robot.driveSystem.pidWrite(-output);
	}
}

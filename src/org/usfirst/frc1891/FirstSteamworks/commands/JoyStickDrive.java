package org.usfirst.frc1891.FirstSteamworks.commands;

import org.usfirst.frc1891.FirstSteamworks.Robot;
import org.usfirst.frc1891.FirstSteamworks.subsystems.DriveSystem;

import edu.wpi.first.wpilibj.command.Command;

public class JoyStickDrive extends Command {
		public JoyStickDrive() {
			requires(Robot.driveSystem);
	    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

	        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
	        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	    }

	    // Called just before this Command runs the first time
	    protected void initialize() {
	    	Robot.driveSystem.setVelocityMode();
//	    	Robot.driveSystem.zeroGyro();
	    }

	    // Called repeatedly when this Command is scheduled to run
	    protected void execute() {
	    	if (Robot.oi.getDriveStick().getRawButton(6)) {
	    		Robot.driveSystem.setSpeed(DriveSystem.drivePowerState.SLOW_SPEED);
	    	}
	    	else if (Robot.oi.getDriveStick().getRawButton(5)) {
	    		Robot.driveSystem.setSpeed(DriveSystem.drivePowerState.MEDIUM_SPEED);
	    	}
	    	else {
	    		Robot.driveSystem.setSpeed(DriveSystem.drivePowerState.FULL_SPEED);
	    	}
	    	Robot.driveSystem.joyDriveVelocity(Robot.oi.getDriveStick(), Robot.oi.getControllerProfile());
//	    	System.out.println("joy value" + Robot.oi.getDriveStick().getY());
//	    	System.out.println(Robot.driveSystem.getFrontRangefinderDistance());
//	    	Robot.driveSystem.publishCurrents();
	    }

	    // Make this return true when this Command no longer needs to run execute()
	    protected boolean isFinished() {
	        return false;
	    }

	    // Called once after isFinished returns true
	    protected void end() {
	    }

	    // Called when another command which requires one or more of the same
	    // subsystems is scheduled to run
	    protected void interrupted() {
	    }
}
